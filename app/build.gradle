apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.tencent.tinker.patch'
apply from: 'tinker.gradle'
def cfg = rootProject.ext.android

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false


    defaultConfig {
        applicationId "com.universal.aifun"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        multiDexKeepProguard file("tinker_multidexkeep.pro")

        flavorDimensions "versionCode"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        config {
            keyAlias 'talk'
            keyPassword 'talkplus'
            storeFile file('../talkplus.jks')
            storePassword 'talkplus'
        }
    }

    productFlavors {

        // 标准通用
        normal {
            applicationId "com.universal.aifun"
            versionName cfg.versionName
            versionCode cfg.versionCode
            buildConfigField "String", "tinker_id", "\"${cfg.versionName}\""
            buildConfigField "String", "tinker_base_id", "\"${cfg.versionName}\""
            buildConfigField "String", "tinker_message", '"基础包"'


            // app_logo
            manifestPlaceholders = [
                    app_logo     : "@mipmap/ic_launcher",
                    app_name     : "@string/app_name",
                    start_logo   : "@mipmap/start_logo",
                    app_scheme   : "menke",
                    JPUSH_APPKEY : "b859237de554b67e71fdf5ac", //JPush上注册的包名对应的appkey.
                    JPUSH_CHANNEL: "developer-default",
            ]

        }

    }


    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
        }
    }

    // 支持大工程模式
    dexOptions {
        jumboMode = true
    }


    def curTime = new Date()
    def timeStr = curTime.format('MMddHHmm')
    buildTypes {

        debug {
            shrinkResources false
            minifyEnabled false   //混淆
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        demo {
            shrinkResources false
            minifyEnabled false   //混淆
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        pre {//预发布打包
            minifyEnabled false
            minifyEnabled false   //混淆
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            //混淆开关
            minifyEnabled false
            // 移除无用的resource文件
            shrinkResources false
            // 是否zip对齐
            zipAlignEnabled false
            // 是否打开debuggable开关
            debuggable false
            // 是否打开jniDebuggable开关
            jniDebuggable false
            //添加秘钥
            signingConfig signingConfigs.config
            //混淆规则配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

//        android.applicationVariants.all { variant ->
//            variant.outputs.all {
//                if (variant.buildType.name.equals('demo')) {
//                    outputFileName = "Demo-${variant.productFlavors[0].name}--V${defaultConfig.versionName}-${timeStr}.apk"
//                }
//                if (variant.buildType.name.equals('pre')) {
//                    outputFileName = "Testing-${variant.productFlavors[0].name}--V${defaultConfig.versionName}-${timeStr}.apk"
//                }
//                if (variant.buildType.name.equals('release')) {
//                    outputFileName = "Global-${variant.productFlavors[0].name}-V${defaultConfig.versionName}-${timeStr}.apk"
//                }
//
//            }
//        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /** 微信tinker 引用包 **/
    //注解编译器，生成application的时候用
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }


    /** 引入module **/
    implementation project(':baselibrary')
    // implementation project(path:':jpushlibrary', configuration: 'default')
}

